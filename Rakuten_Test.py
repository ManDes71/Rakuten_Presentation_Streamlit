# -*- coding: utf-8 -*-
"""
Created on Tue Oct 24 22:45:04 2023

@author: Manuel desplanches
"""

import streamlit as st
import os
import pandas as pd
import gc
from  src import Bibli_DataScience_3 as ds
from  src import ML_DataScience as ml
from  src import CNN_DataScience_2 as cnn
from  src import RNN_DataScience as rnn
import numpy as np
from PIL import Image
import tensorflow as tf

class RESEAU_NEURONNES:
    def __init__(self, reseau,nom_reseau):
        self.__reseau = reseau
        self.__nom_reseau = nom_reseau
        self.__model = None
        
        
    def prediction(self,objet_a_predire):
        self.__model = self.__reseau.create_modele()
        self.__model.build((None, 400, 400, 3))
        print(self.__model.summary())
        print(self.__nom_reseau+"_weight chargement ...")
        ds.load_model(self.__model,self.__nom_reseau+"_weight")
        print(self.__nom_reseau+"_weight charg√© !")
        predictions = self.__model.predict(objet_a_predire)
        pred = np.argmax(predictions, axis=1)
        return pred
def load_image(img):
    im = Image.open(img)
    image = np.array(im)
    return image   


def file_selector(folder_path=None):
    if folder_path is None:
        folder_path = os.path.join('images', 'image_test')
    filenames = os.listdir(folder_path)
    selected_filename = st.selectbox('Choisissez une images √† classer ', filenames)
    return os.path.join(folder_path, selected_filename)

def show():

    # Objectif
    st.markdown("""
    <div style='background-color: #f9f9f9; padding: 15px; border-radius: 10px'>
        <h2 style='color: #333;'>üéØ Objectif</h2>
        <p style='font-size: 15px;'>Il est possible de combiner les mod√®les <b>CNN</b> et <b>SVC</b> pour pr√©dire des cat√©gories √† partir de deux types d'entr√©es : des images et des descriptions textuelles.</p>
    </div>
    """, unsafe_allow_html=True)

    # Mod√®les utilis√©s
    st.markdown("""
    <div style='background-color: #e8f4fc; padding: 15px; border-radius: 10px;'>
        <h2 style='color: #007acc;'>üß† Mod√®les utilis√©s</h2>
        <ul style='font-size: 15px;'>
            <li><b>CNN EfficientNetB1</b> : Ce mod√®le est utilis√© pour extraire les caract√©ristiques des images.</li>
            <li><b>Machine Learning (SVC)</b> : Ce mod√®le est utilis√© pour faire une pr√©diction bas√©e sur les informations textuelles.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    # Fonctionnalit√©s principales
    st.markdown("""
    <div style='background-color: #f4f4e8; padding: 15px; border-radius: 10px;'>
        <h2 style='color: #444;'>üìã Fonctionnalit√©s principales</h2>
        <ul style='font-size: 15px;'>
            <li><b>S√©lection d'images :</b> L'utilisateur peut s√©lectionner une image dans un r√©pertoire au format JPG/PNG. L'image est affich√©e et redimensionn√©e √† 400x400 pixels avant d'√™tre pass√©e au mod√®le CNN. Ce r√©pertpoire ne fait pas partie du jeu d'entrainement.</li>
            <li><b>Pr√©diction avec CNN (EfficientNetB1) :</b> Un mod√®le CNN bas√© sur EfficientNetB1 est charg√© et appliqu√© √† l'image. Les poids du mod√®le sont charg√©s avant la pr√©diction. La pr√©diction de la cat√©gorie est ensuite d√©cod√©e √† l'aide d'un label encoder, et la cat√©gorie pr√©dite est affich√©e.</li>
            <li><b>Pr√©diction avec Machine Learning (SVC) :</b> La description associ√©e √† l'image est r√©cup√©r√©e (d√©signation et description). Un mod√®le de machine learning (SVC) est utilis√© pour faire une pr√©diction bas√©e sur ces informations textuelles. La cat√©gorie pr√©dite par le mod√®le est affich√©e.</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    uploadFile = file_selector()
    st.write('Vous avez choisi  `%s`' % uploadFile)


    # Checking the Format of the page
    if uploadFile is not None:
        img = load_image(uploadFile)
        st.image(img)
        resized_image = tf.image.resize(img, (400, 400))
        reshaped_image = tf.expand_dims(resized_image, 0)
        st.markdown("<span style='color:blue'>Pr√©diction par l'image (Mod√®le CNN)</span>", unsafe_allow_html=True)
        # CNN
        EffB1 = cnn.DS_EfficientNetB1("EfficientNetB1")
        CNN = RESEAU_NEURONNES(EffB1,"EfficientNetB1")
        y_pred = CNN.prediction(reshaped_image)
        print(y_pred)
        y_train = ds.load_ndarray('EfficientNetB1_y_train')
        label_encoder=EffB1.get_labelencoder()
        label_encoder.fit(y_train)
        pred=label_encoder.inverse_transform(y_pred)
        st.markdown("""**Code produit d√©termin√© par le CNN √† partir de l'image** : """)
        st.write("Cat√©gorie ",pred[0])
        Lcat=EffB1.get_cat()
        catdict = EffB1.get_catdict()
        st.write(catdict[pred[0]])
        st.write("*********************************")
        st.markdown("<span style='color:red'>Pr√©diction par la description (Mod√®le Machine learning)</span>", unsafe_allow_html=True)
        # ML
        svc = ml.ML_SVC("Mon_Modele_SVC",process=False)
        #designation,description = svc.get_DF_TEST_DESCRIPTION(uploadFile.split('/')[2]) # unix
        designation,description = svc.get_DF_TEST_DESCRIPTION(uploadFile.split('\\')[2]) # windows
        st.write("designation",designation)
        st.write("description",description)
        pred=svc.predire_phrases(designation,description)
        st.markdown("""**Code produit d√©termin√© par le mod√®le SCV √† partir du texte** : """)
        st.write("Cat√©gorie ",pred[0])
        st.write(catdict[pred[0]])
        CNN = None
        svc = None
        del y_pred, y_train, label_encoder, pred, description, designation
        gc.collect()
        
    else:
        st.write("Make sure you image is in JPG/PNG Format.")